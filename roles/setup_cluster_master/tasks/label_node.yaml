---
- name: Wait for node to be ready
  ansible.builtin.command:
    cmd: "kubectl get node {{ inventory_hostname }}"
  register: node_check
  delegate_to: localhost
  become: false
  retries: 30
  delay: 5
  until: node_check.rc == 0
  changed_when: false

- name: Get current node labels
  ansible.builtin.command:
    cmd: "kubectl get node {{ inventory_hostname }} -o jsonpath='{.metadata.labels}'"
  register: current_labels_json
  delegate_to: localhost
  become: false
  changed_when: false

- name: Parse current labels
  ansible.builtin.set_fact:
    current_labels: "{{ current_labels_json.stdout | from_json }}"

- name: Identify user-managed label keys (exclude all Kubernetes-reserved namespaces)
  ansible.builtin.set_fact:
    user_managed_current_labels: >-
      {{
        current_labels.keys() |
        reject('contains', 'kubernetes.io') |
        reject('contains', 'k8s.io') |
        list
      }}

- name: Identify labels to remove (user-managed labels not in desired state)
  ansible.builtin.set_fact:
    labels_to_remove: >-
      {{
        user_managed_current_labels |
        reject('in', node_labels.keys() | default([])) |
        list
      }}

- name: Remove obsolete labels
  ansible.builtin.command:
    cmd: "kubectl label node {{ inventory_hostname }} {{ item }}-"
  loop: "{{ labels_to_remove }}"
  delegate_to: localhost
  become: false
  when: labels_to_remove | length > 0

- name: Apply labels to control plane node (only if missing or different)
  ansible.builtin.command:
    cmd: "kubectl label node {{ inventory_hostname }} {{ item.key }}={{ item.value }} --overwrite"
  loop: "{{ node_labels | dict2items }}"
  delegate_to: localhost
  become: false
  when: 
    - node_labels | length > 0
    - (item.key not in current_labels) or (current_labels[item.key] | default('') != item.value)
